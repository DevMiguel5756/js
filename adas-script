const path = require('path');
const express = require("express");
const axios = require('axios');
const session = require('express-session');
const mysql = require('mysql2/promise');

const token  = 'ODQ0MTEzNjU5NDMyNzk2MTYx.GkT8De.EOKOPPqbPmWLdcXA4O1s1bHOUb8brNC-bxUzNk';
const app = express();

const dbConfig = {
    host: 'localhost',
    user: 'root',
    password: '',
    database: 'cda',
};

app.use(session({
    secret: 'cda-session-js',   // Escolha uma chave secreta para a sessão
    resave: false,                // Não salvar sessão se não houver alterações
    saveUninitialized: false,     // Não salvar sessões não inicializadas
    cookie: {
        httpOnly: true,           // Impede acesso via JavaScript (segurança)
        secure: false,            // Define como false para desenvolvimento (True em produção, se HTTPS)
        domain: '.cidadealtamtarp.com',  // Defina o domínio principal para permitir o uso de subdomínios
        maxAge: 1000 * 60 * 60 * 24 * 7 // Expiração de 7 dias para a sessão
    }
}));

app.use(express.static(path.join(__dirname, 'public')));
app.use(express.static(path.join(__dirname, 'painel')));
app.use(express.static(path.join(__dirname, 'dashboard')));

app.use((req, res, next) => {
    if (req.url.endsWith('/')) {
        const newUrl = req.url.slice(0, -1);
        res.redirect(301, newUrl);
    } else {
        next();
    }
});

app.get('/', (req, res) => {
    res.sendFile('index.html', { root: '.' });
});

app.get('/painel', async (req, res) => {
    res.sendFile(path.join(__dirname, 'painel', 'index.html'));
});

app.get('/auth/discord', async (req, res) => {
    const code = req.query.code;  // Corrigido o nome do parâmetro
    if (!code) {
        return res.redirect("/"); // Caso o código não seja fornecido
    }

    try {
        // Autenticação com o Discord
        const tokenResponse = await axios.post('https://discord.com/api/oauth2/token', new URLSearchParams({
            client_id: '844113659432796161',
            client_secret: 'eK8Lk7VKt90jgMw0bf-TL-ifPEFrY4l3',
            grant_type: 'authorization_code',
            code: code,
            redirect_uri: 'https://cidadealtamtarp.com/auth/discord',
        }).toString(), {
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
        });

        const { access_token, token_type } = tokenResponse.data;
        console.log(access_token, token_type);  // Verifique os tokens

        const userResponse = await axios.get('https://discord.com/api/users/@me', {
            headers: { authorization: `${token_type} ${access_token}` },
        });

        req.session.user = userResponse.data;
        res.redirect('/dashboard'); // Use um redirecionamento para o painel
    } catch (error) {
        console.error("Erro ao autenticar:", error);
        res.redirect('/'); // Redireciona em caso de erro
    }
});

app.get('/dashboard', async (req, res) => {
    if (!req.session.user) {
        return res.redirect('/');
    }

    const guildId = "822441666584903730";
    const { id: userId } = req.session.user;

    try {
        const response = await axios.get(`https://discord.com/api/guilds/${guildId}/members/${userId}`, {
            headers: {
                Authorization: `Bot ${token}`
            }
        });

        if (!response.data || !response.data.roles) {
            const errorMessage = "true";
            return res.redirect(`/painel?error=${errorMessage}`);
        }

        res.sendFile(path.join(__dirname, 'dashboard', 'index.html'));
    } catch (error) {
        //console.error("Erro ao verificar o status do membro:", error.message);
        const errorMessage = "true";
        return res.redirect(`/painel`);
    }
});

app.get('/dashboard/perfil', async (req, res) => {
    if (!req.session.user) {
        return res.redirect('/');
    }

    const guildId = "822441666584903730";
    const { id: userId } = req.session.user;

    try {
        const response = await axios.get(`https://discord.com/api/guilds/${guildId}/members/${userId}`, {
            headers: {
                Authorization: `Bot ${token}`
            }
        });

        if (!response.data || !response.data.roles) {
            const errorMessage = "Você não está no servidor do Discord. Por favor, entre para acessar o painel.";
            return res.redirect(`/painel?error=${encodeURIComponent(errorMessage)}`);
        }

        res.sendFile(path.join(__dirname, 'painel', 'dashboard.html'));
    } catch (error) {
        console.error("Erro ao verificar o status do membro:", error.message);
        const errorMessage = "Erro ao verificar seu status no Discord.";
        return res.redirect(`/painel?error=${encodeURIComponent(errorMessage)}`);
    }
});

app.get('/user-data', (req, res) => {
    if (req.session.user) {
        res.json(req.session.user);
    } else {
        res.status(401).json({ error: "Não autenticado" });
    }
});

app.get('/check-allowlist-status', async (req, res) => {
    if (!req.session.user) {
        return res.status(401).json({ error: 'Não autenticado' });
    }

    const guildId = "822441666584903730";
    const roleId = "961366876649312336";

    const { id: userId } = req.session.user;

    try {
        const response = await axios.get(`https://discord.com/api/guilds/${guildId}/members/${userId}`, {
            headers: {
                Authorization: `Bot ${token}`
            }
        });

        const isMember = response.data && response.data.roles.includes(roleId);
        res.json({ allowlistStatus: isMember ? "ALLOWLIST APROVADA" : "ALLOWLIST INATIVA" });
    } catch (error) {
        console.error("Erro ao verificar o status da allowlist:", error.message);
        res.json({ allowlistStatus: "ALLOWLIST INATIVA" });
    }
});

app.get('/check-vip-status', async (req, res) => {
    if (!req.session.user) {
        return res.status(401).json({ error: 'Não autenticado' });
    }

    const guildId = "822441666584903730";
    const roleDiamanteId = "1210779610057408532";
    const roleOuroId = "1162251534743122041";
    const rolePrataId = "1162245419015864401";
    const { id: userId } = req.session.user;

    try {
        const response = await axios.get(`https://discord.com/api/guilds/${guildId}/members/${userId}`, {
            headers: {
                Authorization: `Bot ${token}`
            }
        });

        let vipStatus = "Nenhum";
        if (response.data && response.data.roles.includes(roleDiamanteId)) {
            vipStatus = "Diamante";
        } else if (response.data.roles.includes(roleOuroId)) {
            vipStatus = "Ouro";
        } else if (response.data.roles.includes(rolePrataId)) {
            vipStatus = "Prata";
        }

        res.json({ vipStatus });
    } catch (error) {
        console.error("Erro ao verificar o status do VIP:", error.message);
        res.json({ vipStatus: "Nenhum" });
    }
});


app.get('/check-diamantes', async (req, res) => {
    if (!req.session.user) {
        return res.status(401).json({ error: 'Não autenticado' });
    }

    const { id: userId } = req.session.user;

    try {
        const connection = await mysql.createConnection(dbConfig);
        const [rows] = await connection.execute('SELECT diamantes FROM zn_diamantes WHERE discordid = ?', [userId]);

        let diamantes = 0;
        if (rows.length > 0) {
            diamantes = rows[0].diamantes;
        }

        res.json({ diamantes });
    } catch (error) {
        console.error("Erro ao verificar a quantidade de diamantes:", error.message);
        res.status(500).json({ diamantes: 0 });
    }
});

app.get('/check-accountid', async (req, res) => {
    if (!req.session.user) {
        return res.status(401).json({ error: 'Não autenticado' });
    }

    const { id: userId } = req.session.user;

    try {
        const connection = await mysql.createConnection(dbConfig);
        const [rows] = await connection.execute('SELECT id FROM zn_contas WHERE discord = ?', [userId]);

        let userIdFromDB = null; 

        if (rows.length > 0) {
            userIdFromDB = rows[0].id;
        }

        res.json({ userId: userIdFromDB });
    } catch (error) {
        console.error("Erro ao verificar o ID do usuário:", error.message);
        res.status(500).json({ error: 'Erro' });
    }
});

app.get('/logout', (req, res) => {
    req.session.destroy(err => {
        if (err) {
            return res.redirect('/');
        }
        res.redirect('/');
    });
});

app.post('/logout', (req, res) => {
    req.session.destroy(err => {
        if (err) {
            return res.status(500).json({ error: 'Erro ao fazer logout' });
        }
        res.clearCookie('connect.sid');
        res.redirect('/');
    });
});

app.get('/lip', async (req, res) => {
    if (!req.session.user) {
        return res.status(401).json({ error: "Não autenticado" });
    }

    const { id: userId } = req.session.user;


    let ip = req.headers['x-forwarded-for'] || req.connection.remoteAddress;


    if (ip.includes(',')) {
        ip = ip.split(',')[0].trim();
    }


    if (ip.startsWith('::ffff:')) {
        ip = ip.substring(7);
    }


    if (ip === '::1') {
        ip = '127.0.0.1';
    }


    if (ip.includes(':')) {
        console.log('Detectado um IPv6:', ip);

    }

    try {
        const connection = await mysql.createConnection(dbConfig);

        const [rows] = await connection.execute('SELECT allowlist FROM cda_liberacao WHERE discord = ?', [userId]);

        if (rows.length === 0 || rows[0].allowlist !== 'true') {
            await connection.execute(
                'INSERT INTO cda_liberacao (ip, discord, allowlist) VALUES (?, ?, ?)',
                [ip, userId, 'true']
            );
        }

        res.json({ success: true });

    } catch (error) {
        console.error("Erro ao tentar liberar a conexão:", error.message);
        res.status(500).json({ error: 'Erro ao tentar liberar a conexão.' });
    }
});



app.get('/dashboard/connect', (req, res) => {
    res.redirect('mtasa://127.0.0.1:22003');
});

const port = 8000;
app.listen(port, () => {
    console.log(`App Rodando em http://localhost:${port}`);
});
